import { useState, useCallback } from 'react';

interface OperationParams {
  type: 'drill' | 'contour' | 'pocket' | 'face';
  x: number;
  y: number;
  z: number;
  depth?: number;
  toolNumber: number;
  feedRate: number;
  spindleSpeed: number;
}

interface ProgramParams {
  programNumber: number;
  operations: OperationParams[];
}

/**
 * Hook for generating Fanuc-specific G-code
 */
export function useFanucGcodeGenerator() {
  const [gcode, setGcode] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  
  // Generate a simple Fanuc G-code program
  const generateProgram = useCallback((params: ProgramParams): string => {
    try {
      const { programNumber, operations } = params;
      const fanucProgram: string[] = [];
      
      // Program header
      fanucProgram.push(`%`);
      fanucProgram.push(`O${programNumber}`);
      fanucProgram.push(`(FANUC PROGRAM GENERATED BY APP)`);
      
      // Add safety startup
      fanucProgram.push(`N10 G80 G40 G49`);
      fanucProgram.push(`N20 G17 G21 G90 G94`); // XY plane, metric, absolute, feed per minute
      
      let lineNumber = 30;
      
      // Process each operation
      operations.forEach((op, index) => {
        fanucProgram.push(`N${lineNumber} (OPERATION ${index + 1} - ${op.type.toUpperCase()})`);
        lineNumber += 10;
        
        // Tool change
        fanucProgram.push(`N${lineNumber} T${op.toolNumber} M6`);
        lineNumber += 10;
        
        // Start spindle
        fanucProgram.push(`N${lineNumber} S${op.spindleSpeed} M3`);
        lineNumber += 10;
        
        // Generate operation specific code
        switch (op.type) {
          case 'drill':
            // G81 drilling cycle
            fanucProgram.push(`N${lineNumber} G0 X${op.x.toFixed(3)} Y${op.y.toFixed(3)}`);
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G43 H${op.toolNumber} Z100.0`); // Tool length comp
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G81 Z${op.z.toFixed(3)} R5.0 F${op.feedRate.toFixed(0)}`);
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G80`); // Cancel canned cycle
            break;
            
          case 'contour':
            // Simple contour operation
            fanucProgram.push(`N${lineNumber} G0 X${op.x.toFixed(3)} Y${op.y.toFixed(3)}`);
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G43 H${op.toolNumber} Z100.0`); // Tool length comp
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G0 Z5.0`);
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G1 Z${op.z.toFixed(3)} F${(op.feedRate / 2).toFixed(0)}`);
            lineNumber += 10;
            // Simple square contour as an example
            fanucProgram.push(`N${lineNumber} G1 X${(op.x + 50).toFixed(3)} F${op.feedRate.toFixed(0)}`);
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G1 Y${(op.y + 50).toFixed(3)}`);
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G1 X${op.x.toFixed(3)}`);
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G1 Y${op.y.toFixed(3)}`);
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G0 Z100.0`);
            break;
            
          case 'pocket':
            // Simple pocket operation
            fanucProgram.push(`N${lineNumber} G0 X${op.x.toFixed(3)} Y${op.y.toFixed(3)}`);
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G43 H${op.toolNumber} Z100.0`); // Tool length comp
            lineNumber += 10;
            
            // Roughing with multiple passes
            const depth = op.depth || 10;
            const passCount = Math.ceil(depth / 2); // 2mm per pass
            
            for (let pass = 1; pass <= passCount; pass++) {
              const passDepth = Math.min(pass * 2, depth);
              const passZ = op.z - passDepth;
              
              fanucProgram.push(`N${lineNumber} G0 Z5.0`);
              lineNumber += 10;
              fanucProgram.push(`N${lineNumber} G1 Z${passZ.toFixed(3)} F${(op.feedRate / 2).toFixed(0)}`);
              lineNumber += 10;
              
              // Simple square pocket as an example
              fanucProgram.push(`N${lineNumber} G1 X${(op.x + 5).toFixed(3)} Y${(op.y + 5).toFixed(3)} F${op.feedRate.toFixed(0)}`);
              lineNumber += 10;
              fanucProgram.push(`N${lineNumber} G1 X${(op.x + 45).toFixed(3)}`);
              lineNumber += 10;
              fanucProgram.push(`N${lineNumber} G1 Y${(op.y + 45).toFixed(3)}`);
              lineNumber += 10;
              fanucProgram.push(`N${lineNumber} G1 X${(op.x + 5).toFixed(3)}`);
              lineNumber += 10;
              fanucProgram.push(`N${lineNumber} G1 Y${(op.y + 5).toFixed(3)}`);
              lineNumber += 10;
              
              // Move inward for the next pass
              if (pass < passCount) {
                fanucProgram.push(`N${lineNumber} G1 X${(op.x + 10).toFixed(3)} Y${(op.y + 10).toFixed(3)}`);
                lineNumber += 10;
                fanucProgram.push(`N${lineNumber} G1 X${(op.x + 40).toFixed(3)}`);
                lineNumber += 10;
                fanucProgram.push(`N${lineNumber} G1 Y${(op.y + 40).toFixed(3)}`);
                lineNumber += 10;
                fanucProgram.push(`N${lineNumber} G1 X${(op.x + 10).toFixed(3)}`);
                lineNumber += 10;
                fanucProgram.push(`N${lineNumber} G1 Y${(op.y + 10).toFixed(3)}`);
                lineNumber += 10;
              }
            }
            
            fanucProgram.push(`N${lineNumber} G0 Z100.0`);
            break;
            
          case 'face':
            // Face milling operation
            fanucProgram.push(`N${lineNumber} G0 X${op.x.toFixed(3)} Y${op.y.toFixed(3)}`);
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G43 H${op.toolNumber} Z100.0`); // Tool length comp
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G0 Z5.0`);
            lineNumber += 10;
            fanucProgram.push(`N${lineNumber} G1 Z${op.z.toFixed(3)} F${(op.feedRate / 2).toFixed(0)}`);
            lineNumber += 10;
            
            // Simple facing pattern
            const width = 100;
            const stepover = 40; // 80% of 50mm tool diameter
            const passes = Math.ceil(width / stepover);
            
            for (let pass = 0; pass < passes; pass++) {
              const yPos = op.y + (pass * stepover);
              
              if (pass % 2 === 0) {
                // Even passes: left to right
                fanucProgram.push(`N${lineNumber} G1 Y${yPos.toFixed(3)} F${op.feedRate.toFixed(0)}`);
                lineNumber += 10;
                fanucProgram.push(`N${lineNumber} G1 X${(op.x + width).toFixed(3)}`);
              } else {
                // Odd passes: right to left
                fanucProgram.push(`N${lineNumber} G1 Y${yPos.toFixed(3)} F${op.feedRate.toFixed(0)}`);
                lineNumber += 10;
                fanucProgram.push(`N${lineNumber} G1 X${op.x.toFixed(3)}`);
              }
              
              lineNumber += 10;
            }
            
            fanucProgram.push(`N${lineNumber} G0 Z100.0`);
            break;
        }
        
        lineNumber += 10;
      });
      
      // End of program
      fanucProgram.push(`N${lineNumber} G0 Z100.0`);
      lineNumber += 10;
      fanucProgram.push(`N${lineNumber} M5`); // Stop spindle
      lineNumber += 10;
      fanucProgram.push(`N${lineNumber} G91 G28 Z0 M9`); // Return to machine zero, coolant off
      lineNumber += 10;
      fanucProgram.push(`N${lineNumber} G28 X0 Y0`); // Return to machine zero
      lineNumber += 10;
      fanucProgram.push(`N${lineNumber} M30`); // End of program
      fanucProgram.push(`%`);
      
      const generatedGcode = fanucProgram.join('\n');
      setGcode(generatedGcode);
      setError(null);
      
      return generatedGcode;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : String(err);
      setError(errorMessage);
      return '';
    }
  }, []);
  
  // Convert drilling coordinates to Fanuc G-code
  const generateDrillingProgram = useCallback((params: {
    programNumber: number;
    toolNumber: number;
    drillDiameter: number;
    spindleSpeed: number;
    feedRate: number;
    safeZ: number;
    drillDepth: number;
    retractHeight: number;
    holes: { x: number; y: number }[];
  }): string => {
    try {
      const {
        programNumber,
        toolNumber,
        drillDiameter,
        spindleSpeed,
        feedRate,
        safeZ,
        drillDepth,
        retractHeight,
        holes
      } = params;
      
      const fanucProgram: string[] = [];
      
      // Program header
      fanucProgram.push(`%`);
      fanucProgram.push(`O${programNumber}`);
      fanucProgram.push(`(FANUC DRILLING PROGRAM)`);
      fanucProgram.push(`(TOOL: T${toolNumber} - DRILL D=${drillDiameter.toFixed(2)}MM)`);
      
      // Initial setup
      fanucProgram.push(`N10 G80 G40 G49`); // Cancel cycles, cutter comp, tool length comp
      fanucProgram.push(`N20 G17 G21 G90 G94`); // XY plane, metric, absolute, feed per minute
      
      // Tool change
      fanucProgram.push(`N30 T${toolNumber} M6`);
      fanucProgram.push(`N40 G0 G90 G54`); // Rapid, absolute, work offset
      fanucProgram.push(`N50 S${spindleSpeed} M3`); // Spindle speed and start CW
      fanucProgram.push(`N60 G43 H${toolNumber} Z${safeZ.toFixed(3)}`); // Tool length compensation & Move to safe Z
      
      // Setup drilling cycle (G81)
      fanucProgram.push(`N80 G99 G81 Z${drillDepth.toFixed(3)} R${retractHeight.toFixed(3)} F${feedRate.toFixed(0)}`); // R-plane return, Define G81
      
      // Process each hole
      holes.forEach((hole, index) => {
        const lineNumber = 100 + (index * 10);
        // Drill at coordinates
        fanucProgram.push(`N${lineNumber} X${hole.x.toFixed(3)} Y${hole.y.toFixed(3)}`);
      });
      
      // Cancel drilling cycle and return to safe position
      const finalLine = 100 + (holes.length * 10);
      fanucProgram.push(`N${finalLine} G80`); // Cancel drilling cycle
      fanucProgram.push(`N${finalLine + 10} G0 Z${safeZ.toFixed(3)}`);
      fanucProgram.push(`N${finalLine + 20} M5`); // Stop spindle
      fanucProgram.push(`N${finalLine + 30} G91 G28 Z0 M9`); // Return to machine Z zero, coolant off
      fanucProgram.push(`N${finalLine + 40} G28 X0 Y0`); // Return to machine XY zero
      fanucProgram.push(`N${finalLine + 50} M30`); // End of program
      fanucProgram.push(`%`);
      
      const generatedGcode = fanucProgram.join('\n');
      setGcode(generatedGcode);
      setError(null);
      
      return generatedGcode;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : String(err);
      setError(errorMessage);
      return '';
    }
  }, []);
  
  return {
    gcode,
    error,
    generateProgram,
    generateDrillingProgram
  };
}
